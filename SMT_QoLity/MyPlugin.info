<!-- These are the original property values exported into the .csproj file to do the build -->
<Project>

  <PropertyGroup>
    <AssemblyName>SuperQoLity</AssemblyName>
    <RootNamespace>$(AssemblyName)</RootNamespace>
    <PackageId>es.damntry.SuperQoLity</PackageId>
    <Product>$(PackageId)</Product>
    <Version>0.8.7.6</Version>
    <Description>Bepinex plugin for Supermarket Together adding extra QoL features</Description>
    <Authors>Damntry</Authors>
    <Company>None</Company>
  </PropertyGroup>

  <PropertyGroup>
    <BetterSMTSupportedVersion>2.4.0</BetterSMTSupportedVersion>
  </PropertyGroup>
  <!-- Full debug for old Unity runtimes, instead of the modern portable one.
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugType>Full</DebugType>
  </PropertyGroup>
  -->

  <!-- 
  Build code below was taken from "BepInEx.PluginInfoProps.props", of the "BepInEx.PluginInfoProps" NuGet package 
  Modified to take values for GUID and Name from different properties (Used to be <AssemblyName> for GUID, and <Product> for name).
  -->
  <Target Name="AddGeneratedFile" BeforeTargets="BeforeCompile;CoreCompile" Inputs="$(MSBuildAllProjects)" Outputs="$(IntermediateOutputPath)GeneratedFile.cs">
    <PropertyGroup>
      <BepInExPluginGuid Condition="'$(BepInExPluginGuid)' == ''">$(PackageId)</BepInExPluginGuid>
      <BepInExPluginName Condition="'$(BepInExPluginName)' == ''">$(AssemblyName)</BepInExPluginName>
      <BepInExPluginVersion Condition="'$(BepInExPluginVersion)' == ''">$(Version)</BepInExPluginVersion>
      <GeneratedText>
        <![CDATA[
namespace $(RootNamespace)
{
    public static class MyPluginInfo
    {
        public const string PLUGIN_GUID = "$(BepInExPluginGuid)"%3B
        public const string PLUGIN_NAME = "$(BepInExPluginName)"%3B
        public const string PLUGIN_VERSION = "$(BepInExPluginVersion)"%3B
        public const string BETTERSMT_SUPPORTED_VERSION = "$(BetterSMTSupportedVersion)"%3B
    }
}
      ]]>
      </GeneratedText>
      <GeneratedFilePath>$(IntermediateOutputPath)MyPluginInfo.cs</GeneratedFilePath>
    </PropertyGroup>
    <ItemGroup>
      <Compile Include="$(GeneratedFilePath)" />
      <FileWrites Include="$(GeneratedFilePath)" />
    </ItemGroup>
    <WriteLinesToFile Lines="$(GeneratedText)" File="$(GeneratedFilePath)" WriteOnlyWhenDifferent="true" Overwrite="true" />
  </Target>

  <!-- Generate manifest.json file for Thunderstore -->
  <Target Name="GenerateManifest" AfterTargets="PostBuildEvent" Inputs="$(MSBuildAllProjects)" Outputs="$(IntermediateOutputPath)GeneratedFile.json">
    <GetAssemblyIdentity AssemblyFiles="$(TargetDir)\$(AssemblyName).dll">
      <Output TaskParameter="Assemblies" ItemName="assembInfo"/>
    </GetAssemblyIdentity>
    <PropertyGroup>

      <GeneratedJson>
        <![CDATA[
{
  "name": "SuperQoLity",
  "version_number": "$([System.Version]::Parse(%(assembInfo.Version)).Major).$([System.Version]::Parse(%(assembInfo.Version)).Minor).$([System.Version]::Parse(%(assembInfo.Version)).Build)$([System.Version]::Parse(%(assembInfo.Version)).Revision)",
  "website_url": "https://github.com/Damntry/SuperQoLity",
  "description": "AI, performance, and QoL changes for Supermarket Together",
  "dependencies": [
    "BepInEx-BepInExPack-5.4.2100"
  ]
}
      ]]>
      </GeneratedJson>
      <GeneratedJsonFilePath>$(MSBuildStartupDirectory)/Docs/manifest.json</GeneratedJsonFilePath>
    </PropertyGroup>
    <ItemGroup>
      <FileWrites Include="$(GeneratedJsonFilePath)" />
    </ItemGroup>
    <WriteLinesToFile Lines="$(GeneratedJson)" File="$(GeneratedJsonFilePath)" WriteOnlyWhenDifferent="true" Overwrite="true" />
  </Target>
  
  <!-- This is to remind myself to change versions in case I build a new release milestone -->
  <Target Name="WriteToFileXXX" AfterTargets="PostBuildEvent">

    <PropertyGroup>
      <LastVersionFilePath>.\LastVersionBuilt.txt</LastVersionFilePath>
    </PropertyGroup>

    <ReadLinesFromFile File="$(LastVersionFilePath)">
      <Output
          TaskParameter="Lines"
          ItemName="VersionInFile"/>
    </ReadLinesFromFile>
    
    <Warning Text="Version number hasnt changed since last build. This is usually normal, but dont forget to change it when its needed."
              Condition="'@(VersionInFile)' == '$(Version)'" />

    <WriteLinesToFile File="$(LastVersionFilePath)" Lines="$(Version)" Overwrite="True"/>
  </Target>

</Project>